<?php

namespace Scfc\Command;

use Scfc\Helpers;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

class UpdateComposerCommand extends Command
{
    /** @var SymfonyStyle */
    protected $io;
    
    public function configure()
    {
        parent::configure(); // TODO: Change the autogenerated stub
        $this
            ->setName('update')
            ->setDescription("Updates a composer.json from a folder of installed modules.")
            ->addArgument(
                'drupal-root',
                InputArgument::REQUIRED
            );
    }

    public function execute(InputInterface $input, OutputInterface $output)
    {
        $this->io = new SymfonyStyle($input, $output);
        $drupal_root = realpath($input->getArgument('drupal-root'));
        $modules = $this->findModules($drupal_root);
        if (empty($modules)) {
            $this->io->error(sprintf("no modules found at %s", $drupal_root));
            return 1;
        }
        
        return $this->updateComposer($drupal_root, $modules);
    }

    private function findModules($drupal_root)
    {
        $this->io->comment("Find contrib modules ...");
        $modules = [];
        if (!$drupal_root) {
            return $modules;
        }
        $path = $drupal_root . '/sites/all/modules/contrib';
        
        $directory = scandir($path);
        $this->io->progressStart(count($directory));
        foreach ($directory as $file) {
            $this->io->progressAdvance();
            if ($file[0] == '.') {
                continue;
            }
            $info_file_path = "$path/$file/$file.info";
            if (file_exists($info_file_path)) {
                $data = $this->parseInfoFile($file, $info_file_path);
                $modules[$file] = $data;
            }
        }
        $this->io->progressFinish();
        
        return $modules;
    }

    private function parseInfoFile($module, $info_file_path)
    {
        $content = file_get_contents($info_file_path);
        return Helpers::drupal_parse_info_format($content);
    }

    private function updateComposer($drupal_root, array $modules)
    {
        $this->io->comment("Update composer.json ...");
        $composer_file = "$drupal_root/composer.json";
        if (!file_exists($composer_file)) {
            $composer_file = "$drupal_root/.tools/composer.json";
        }
        if (!file_exists($composer_file)) {
            $this->io->error("could not find composer.json");
            return 1;
        }
        $content = file_get_contents($composer_file);
        $composer = json_decode($content, true);
        foreach ($modules as $name => $module) {
            if (empty($module['version'])) {
                $this->io->warning(sprintf("Skipping %s as no version could be determined!", $module["name"]));
                continue;
            }
            
            $version = str_replace('7.x-', '', $module['version']);
            $existing_version = $composer['require']['drupal/' . $name] ?? false;
            if ($existing_version !== $version) {
                $composer['require']['drupal/' . $name] = $version;
                $this->io->comment(sprintf("Using version %s for module %s", $version, $name));
            }
        }
        
        if (empty($composer['require-dev'])) {
            $composer['require-dev'] = new \StdClass();
        }
        $content = json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        file_put_contents($composer_file, $content);

        return 0;
    }
}
